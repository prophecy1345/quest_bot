import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from database import is_user_paid, add_user, remove_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
ADMIN_CHAT_ID = os.getenv("CHAT_ID")
WELCOME_IMAGE_PATH = "welcome.jpg"

if TOKEN is None:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–µ—Å—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
class QuestState(StatesGroup):
    language = State()  # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()
    question5 = State()
    question6 = State()
    question7 = State()
    question8 = State()
    question9 = State()
    question10 = State()

@dp.message(Command("id"))
async def send_user_id(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ Telegram ID –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = message.from_user.id
    await message.answer(f"`{user_id}`", parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def get_language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
@dp.message(Command("language"))
async def change_language(message: types.Message, state: FSMContext):
    await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=get_language_keyboard())
    await state.set_state(QuestState.language)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(F.data.startswith("lang_"))
async def process_language_selection(callback: types.CallbackQuery, state: FSMContext):
    language = callback.data.split("_")[1]
    await state.update_data(language=language)

    if language == "ru":
        text = "‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –∫–≤–µ—Å—Ç! üöÄ"
    else:
        text = "‚úÖ You have chosen English!\n\nNow you can start the quest! üöÄ"

    await callback.message.answer(text)
    await send_welcome(callback.message, state)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å
    if "language" not in data:
        await message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose your language:", reply_markup=get_language_keyboard())
        await state.set_state(QuestState.language)
        return

    language = data["language"]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–ª–∞—Ç—É
    if not is_user_paid(user_id):
        text_ru = (
            "üîí **–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–∫—Ä—ã—Ç**\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, —Å–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–µ–µ:\n\n"
            "1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –º–Ω–µ ([Hristina](https://t.me/Hristina_Photo)) ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n"
            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
            "3Ô∏è‚É£ –£–∑–Ω–∞–π —Å–≤–æ–π Telegram ID ‚Äî –Ω–∞–ø–∏—à–∏ /id –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n"
            "4Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π ID ([Hristina](https://t.me/Hristina_Photo)).\n"
            "5Ô∏è‚É£ –Ø –¥–æ–±–∞–≤–ª—é —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ ‚Äî –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "6Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏ /start\n\n"
            "‚ùì –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –Ω–∞–ø–∏—à–∏ –º–Ω–µ!"
        )

        text_en = (
            "üîí **Access to the bot is restricted**\n\n"
            "To get access, follow these steps:\n\n"
            "1Ô∏è‚É£ Message me ([Hristina](https://t.me/Hristina_Photo)) ‚Äî I'll explain how to pay.\n"
            "2Ô∏è‚É£ Complete the payment following the instructions.\n"
            "3Ô∏è‚É£ Find your Telegram ID ‚Äî type /id in this chat.\n"
            "4Ô∏è‚É£ Send me your ID ([Hristina](https://t.me/Hristina_Photo)).\n"
            "5Ô∏è‚É£ I'll add you to the list ‚Äî then the bot will be available.\n"
            "6Ô∏è‚É£ Start the bot ‚Äî type /start\n\n"
            "‚ùì If you have any issues, message me!"
        )

        await message.answer(text_ru if language == "ru" else text_en, parse_mode="Markdown", disable_web_page_preview=True)
        return

    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –æ–ø–ª–∞—á–µ–Ω ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∫–≤–µ—Å—Ç
    photo = FSInputFile(WELCOME_IMAGE_PATH)

    welcome_text_ru = (
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Subotica Quest!**\n\n"
        "–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —Å–¥–µ–ª–∞–µ—Ç —Ç–≤–æ—é –ø—Ä–æ–≥—É–ª–∫—É –ø–æ –°—É–±–æ—Ç–∏—Ü–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ.\n"
        "–ü—Ä–æ—è–≤–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º!\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –¢–æ–≥–¥–∞ –≤–ø–µ—Ä–µ–¥! üöÄ"
    )

    welcome_text_en = (
        "üëã **Welcome to the Subotica Quest!**\n\n"
        "This quest will make your walk through Subotica more exciting.\n"
        "Be creative and, most importantly, enjoy the process!\n\n"
        "Ready to start? Let's go! üöÄ"
    )

    await message.answer_photo(photo, caption=welcome_text_ru if language == "ru" else welcome_text_en)
    await ask_question1(message, state)

# –í–æ–ø—Ä–æ—Å 1
async def ask_question1(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    if language == "ru":
        text = (
            "ü¶á **–ó–∞–¥–∞–Ω–∏–µ 1**\n"
            "–£ –≤–æ–∫–∑–∞–ª–∞, –≥–¥–µ —É–ª–∏—Ü–∞ –¥—ã—à–∏—Ç —Ç–∏—à–∏–Ω–æ–π,\n"
            "–ö—Ä—ã–ª–∞—Ç–∞—è —Å—Ç—Ä–∞–∂–∞ –Ω–∞—à–ª–∞ —É–≥–æ–ª —Å–≤–æ–π.\n"
            "–ù–∞–π–¥–∏ –µ—ë –æ–±–ª–∏–∫ –Ω–∞ –∫–∞–º–µ–Ω–Ω–æ–π –≥–ª–∞–¥–∏ ‚Äî\n"
            "–ê —Å–∫–æ–ª—å–∫–æ —Å—Ç—É–ø–µ–Ω–µ–∫ –≤–µ–¥—É—Ç –∫ –µ—ë ‚Äû–∑–≥—Ä–∞–¥–µ‚Äú?"
        )
    else:
        text = (
            "ü¶á **Task 1**\n"
            "Near the station, where streets are so still,\n"
            "Winged guardians stand, as if time‚Äôs at a chill.\n"
            "Find their reflection on stone standing tall ‚Äî\n"
            "And how many steps lead up to their hall?"
        )

    await message.answer(text)
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question1)

@dp.message(QuestState.question1)
async def process_question1(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    attempts = data.get("attempts", 0)

    correct_answer = "7"
    response_correct = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!" if language == "ru" else "‚úÖ Correct! Moving on!"
    response_wrong = "‚ùå –ù–µ —Å–æ–≤—Å–µ–º. –ü–æ—Å—á–∏—Ç–∞–π –µ—â—ë —Ä–∞–∑!" if language == "ru" else "‚ùå Not quite. Count again!"

    if message.text.strip() == correct_answer:
        await message.answer(response_correct)
        await ask_question2(message, state)
    else:
        attempts += 1
        await state.update_data(attempts=attempts)
        if attempts < 3:
            await message.answer(f"{response_wrong} –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}")
        else:
            correct_text = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 7. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!" if language == "ru" else "Correct answer: 7. Moving on!"
            await message.answer(f"‚ùå {correct_text}")
            await ask_question2(message, state)

# –í–æ–ø—Ä–æ—Å 2 (—Ñ–æ—Ç–æ)
async def ask_question2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    if language == "ru":
        text = (
            "ü©∑ **–ó–∞–¥–∞–Ω–∏–µ 2**\n"
            "–í —Ñ–∞—Å–∞–¥–∞—Ö –∏ –ø–ª–∏—Ç–∫–µ, –≤ –∫–æ–≤–∞–Ω—ã—Ö —É–∑–æ—Ä–∞—Ö\n"
            "–°–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å–µ—Ä–¥—Ü–∞ –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö.\n"
            "–ù–∞–π–¥–∏ –∏—Ö –Ω–∞ –∑–¥–∞–Ω–∏—è—Ö ‚Äî —Ç—Ä–∏ –æ—Ç—ã—â–∏,\n"
            "–í—ã–±–µ—Ä–∏ —Å–Ω–∏–º–∫–∏ –∏ –º–Ω–µ –æ—Ç–æ—à–ª–∏!"
        )
    else:
        text = (
            "ü©∑ **Task 2**\n"
            "In facades and tiles, in ironwork‚Äôs grace,\n"
            "Hearts hide away in the city‚Äôs embrace.\n"
            "Find them on buildings‚Äîthree is the key,\n"
            "Capture their images, then send them to me!"
        )

    await message.answer(text)
    await state.update_data(photo_count=0)
    await state.set_state(QuestState.question2)

@dp.message(QuestState.question2, F.photo)
async def process_question2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_count = data.get("photo_count", 0) + 1
    language = data.get("language", "ru")

    response_accept = f"üì∏ –§–æ—Ç–æ {photo_count}/3 –ø—Ä–∏–Ω—è—Ç–æ! –ñ–¥—É –µ—â—ë {3 - photo_count}." if language == "ru" else f"üì∏ Photo {photo_count}/3 received! Waiting for {3 - photo_count} more."
    response_complete = "‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è! –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!" if language == "ru" else "‚úÖ Great collection! Next task!"

    if photo_count > 3:
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 3 —Ñ–æ—Ç–æ!" if language == "ru" else "‚ö†Ô∏è Three photos are enough!")
        return

    await state.update_data(photo_count=photo_count)
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)

    if photo_count < 3:
        await message.answer(response_accept)
    else:
        await bot.send_message(ADMIN_CHAT_ID, f"üì∑ @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª 3 —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 2")
        await message.answer(response_complete)
        await ask_question3(message, state)
        await state.update_data(photo_count=0)

@dp.message(QuestState.question2)
async def handle_text_in_question2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    await message.answer("‚ùå –≠—Ç–æ —Ñ–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å 3 —Å–Ω–∏–º–∫–∞." if language == "ru" else "‚ùå This is a photo task! Please send 3 pictures.")

# –í–æ–ø—Ä–æ—Å 3 (—Ç–µ–∫—Å—Ç)
async def ask_question3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "üìñ **–ó–∞–¥–∞–Ω–∏–µ 3**\n"
        "–í –∫–Ω–∏–∂–Ω—ã–π –∑–∞–π–¥–∏, –æ—Ç—ã—â–∏ –±–µ–∑ —Ç—Ä—É–¥–∞\n"
        "–ö–Ω–∏–≥—É, —á—Ç–æ –≤ —Å–µ—Ä–¥—Ü–µ —Ç–≤–æ—ë–º –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–µ –≤—Å–ª—É—Ö –ø—Ä–æ—á–∏—Ç–∞–π ‚Äî\n"
        "–ö–∞–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∑–≤—É—á–∏—Ç, –æ—Ç–≤–µ—á–∞–π!"
    ) if language == "ru" else (
        "üìñ **Task 3**\n"
        "Step into a bookstore, go take a glance,\n"
        "Find a dear book that has you entranced.\n"
        "Read out its title, fresh and anew ‚Äî\n"
        "Now, tell me in Serbian, how does it sound to you?"
    )

    await message.answer(text)
    await state.set_state(QuestState.question3)

@dp.message(QuestState.question3)
async def process_question3(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    response = "üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä! –ò–¥–µ–º –¥–∞–ª—å—à–µ!" if language == "ru" else "üìö Interesting choice! Let's continue!"

    await message.answer(response)
    await ask_question4(message, state)

# –í–æ–ø—Ä–æ—Å 4 (—Ñ–æ—Ç–æ –¥–≤–µ—Ä–∏)
async def ask_question4(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "üö™ **–ó–∞–¥–∞–Ω–∏–µ 4**\n"
        "–ù–∞–π–¥–∏ –ª—é–±—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –¥–≤–µ—Ä—å,\n"
        "–í–Ω—É—Ç—Ä—å –∑–∞–≥–ª—è–Ω–∏, —Ç–∏—à–∏–Ω–µ –ª–∏—à—å –ø–æ–≤–µ—Ä—å.\n"
        "–õ–µ—Å—Ç–Ω–∏—Ü—ã —Å—Ç—Ä–æ–π–Ω–æ–π –∏–∑–≥–∏–±—ã —É–∑—Ä–∏\n"
        "–ò —Ñ–æ—Ç–æ –¥–≤–µ—Ä–∏ –º–Ω–µ —Å–∫–æ—Ä–µ–µ –ø—Ä–∏—à–ª–∏!"
    ) if language == "ru" else (
        "üö™ **Task 4**\n"
        "Find any doorway that stands open wide,\n"
        "Peek in and trust in the silence inside.\n"
        "See how the staircase so gracefully bends,\n"
        "And send me a photo‚ÄîI'll wait, my friend!"
    )

    await message.answer(text)
    await state.update_data(photo_count=0)
    await state.set_state(QuestState.question4)

@dp.message(QuestState.question4, F.photo)
async def process_question4(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    response = "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ! –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!" if language == "ru" else "‚úÖ Great photo! Next task!"

    await state.update_data(photo_count=1)
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)

    await bot.send_message(ADMIN_CHAT_ID, f"üì∑ @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 4")
    await message.answer(response)
    await ask_question5(message, state)

@dp.message(QuestState.question4)
async def handle_text_in_question4(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–≤–µ—Ä–∏!" if language == "ru" else "‚ùå Please send a photo of the door!")

# –í–æ–ø—Ä–æ—Å 5 (—Ç–µ–∫—Å—Ç)
async def ask_question5(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "üèõ **–ó–∞–¥–∞–Ω–∏–µ 5**\n"
        "–í —Ü–µ–Ω—Ç—Ä–µ –°—É–±–æ—Ç–∏—Ü—ã, –≥–¥–µ –∂–∏–∑–Ω–∏ –±—ã—Å—Ç—Ä—ã–π —Ö–æ–¥,\n"
        "–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Ç–∏—Ö–æ –∂–∏–≤—ë—Ç.\n"
        "–í–≥–ª—è–¥–∏—Å—å, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏, –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —É–∑–Ω–∞–π,\n"
        "–ò–∑ —á–µ–≥–æ –æ–Ω —Å–æ–∑–¥–∞–Ω ‚Äî —Å–∫–æ—Ä–µ–π –æ—Ç–≥–∞–¥–∞–π!"
    ) if language == "ru" else (
        "üèõ **Task 5**\n"
        "In the heart of Subotica, where life rushes by,\n"
        "A miniature city stands quiet and shy.\n"
        "Look closely, observe, every detail explore ‚Äî\n"
        "Guess what it's made of, and tell me once more!"
    )

    await message.answer(text)
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question5)

@dp.message(QuestState.question5)
async def process_question5(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    correct_answer = "–±—Ä–æ–Ω–∑–∞" if language == "ru" else "bronze"
    response_correct = "‚úÖ –£—Ä–∞! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç." if language == "ru" else "‚úÖ Hooray! That's the correct answer!"
    response_wrong = "‚ùå –ù–µ —Å–æ–≤—Å–µ–º. –ü–æ–¥—É–º–∞–π –µ—â—ë!" if language == "ru" else "‚ùå Not quite. Think again!"

    if message.text.strip().lower() == correct_answer:
        await message.answer(response_correct)
        await ask_question6(message, state)
    else:
        await message.answer(response_wrong)

# –í–æ–ø—Ä–æ—Å 6 (—Ñ–æ—Ç–æ)
async def ask_question6(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "‚õ≤Ô∏è **–ó–∞–¥–∞–Ω–∏–µ 6**\n"
        "–î–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∏ 'magnum opus' —Ä—è–¥–æ–º ‚Äî\n"
        "–ü–æ–ª–Ω—ã –ª—é–±–æ–≤—å—é, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –∏—Ö –≤–∑–≥–ª—è–¥—ã.\n"
        "–ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å –∏—Ö - –≤—Ä–µ–º—è –Ω–µ —Ç–µ—Ä—è–π\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–º–µ—Ä—É –∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π!"
    ) if language == "ru" else (
        "‚õ≤Ô∏è **Task 6**\n"
        "Two architects stand with their magnum opus near,\n"
        "Their eyes full of love and inspiration sincere.\n"
        "Once you have found them, don‚Äôt waste any time ‚Äî\n"
        "Capture the moment and send me the sign!"
    )

    await message.answer(text)
    await state.update_data(photo_count=0)
    await state.set_state(QuestState.question6)

@dp.message(QuestState.question6, F.photo)
async def process_question6(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    response = "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!" if language == "ru" else "‚úÖ Great! Now, the next task!"

    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
    await bot.send_message(ADMIN_CHAT_ID, f"üì∑ @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 6")

    await message.answer(response)
    await ask_question7(message, state)

@dp.message(QuestState.question6)
async def handle_text_in_question6(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤!" if language == "ru" else "‚ùå Please send a photo of the architects!")

# –í–æ–ø—Ä–æ—Å 7 (—Ç–µ–∫—Å—Ç)
async def ask_question7(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "üßò‚Äç‚ôÇÔ∏è **–ó–∞–¥–∞–Ω–∏–µ 7**\n"
        "–ú–µ—Ç–∞–Ω–∏–µ –¥—É—Ö–∞ –æ—Å—Ç–∞–≤—å –ø–æ–∑–∞–¥–∏,\n"
        "–ï–¥–∏–Ω—Å—Ç–≤–æ —Å—É–µ—Ç—ã –∏ —Ç–∏—à–∏–Ω—ã –≤ –≥—Ä—É–¥–∏.\n"
        "–†–∞—Å—Å–ª–∞–±—å—Å—è, –≥–¥–µ –∫–æ—Ñ–µ, —É—é—Ç –∏ –ø–æ–∫–æ–π,\n"
        "–ê —Ä–∞–¥–æ—Å—Ç—å –±—ã–ª–∞ –≤–µ–¥—å –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π.\n"
        "–ö–æ–≥–¥–∞ –≤—Å–µ –ø–æ–π–º–µ—à—å - –æ—Ç–≤–µ—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å!"
    ) if language == "ru" else (
        "üßò‚Äç‚ôÇÔ∏è **Task 7**\n"
        "Mindful, let go of the chaos inside,\n"
        "Embrace both the rush and the calm side by side.\n"
        "Relax where the coffee brings warmth to your soul,\n"
        "And joy was right there, always whole.\n"
        "Know it at last‚Äîyour answer is cast!"
    )

    await message.answer(text)
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question7)

@dp.message(QuestState.question7)
async def process_question7(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    correct_answer = "–º–µ—Ä–∞–∫" if language == "ru" else "merak"
    response_correct = "‚úÖ –í–µ—Ä–Ω–æ! –ù–∞–¥–µ—é—Å—å, —Ç—ã —Å–º–æ–≥ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º!" if language == "ru" else "‚úÖ Correct! I hope you enjoyed the moment!"
    response_wrong = "‚ùå –ü–æ–¥—É–º–∞–π –µ—â—ë! –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–∏—è—Ç–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏." if language == "ru" else "‚ùå Think again! It's connected to pleasant moments."

    if message.text.strip().lower() == correct_answer:
        await message.answer(response_correct)
        await ask_question8(message, state)
    else:
        await message.answer(response_wrong)

# –í–æ–ø—Ä–æ—Å 8 (—Ç–µ–∫—Å—Ç)
async def ask_question8(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "üìç **–ó–∞–¥–∞–Ω–∏–µ 8**\n"
        "–¢–∞–º, –≥–¥–µ –∫–∞–º–µ–Ω—å –ª–µ–∂–∏—Ç –≤–µ–∫–æ–≤–æ–π –ø–æ–¥ –Ω–æ–≥–æ–π,\n"
        "–ù–∞—á–∏–Ω–∞–µ—Ç —É–ª–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω –æ–±—É–≤–Ω–æ–π.\n"
        "–ú–æ—â—ë–Ω–∞—è, –¥—Ä–µ–≤–Ω—è—è, –º–∞–Ω–∏—Ç –ø—Ä–æ–π—Ç–∏—Å—å\n"
        "–ù–∞–∑–≤–∞–Ω—å–µ –ø–∏—à–∏ –∏ –Ω–∞ –Ω–µ–π –æ–∫–∞–∂–∏—Å—å."
    ) if language == "ru" else (
        "üìç **Task 8**\n"
        "Where ancient stone lies beneath your feet,\n"
        "A shoe shop stands where the street does meet.\n"
        "Cobblestones whisper, inviting your pace ‚Äî\n"
        "Write down its name and go find the place!"
    )

    await message.answer(text)
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question8)

@dp.message(QuestState.question8)
async def process_question8(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    correct_answer = "–ø–µ—Ç—Ä–∞ –¥—Ä–∞–ø—à–∏–Ω–∞" if language == "ru" else "petra drap≈°ina"
    response_correct = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏!" if language == "ru" else "‚úÖ Correct! Enjoy your walk!"
    response_wrong = "‚ùå –ü–æ–¥—É–º–∞–π –µ—â—ë! –≠—Ç–æ —É–∑–∫–∞—è, –º–æ—â—ë–Ω–∞—è —É–ª–∏—Ü–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ." if language == "ru" else "‚ùå Think again! It's a narrow, cobbled street in the center."

    if message.text.strip().lower() == correct_answer:
        await message.answer(response_correct)
        await ask_question9(message, state)
    else:
        await message.answer(response_wrong)

# –í–æ–ø—Ä–æ—Å 9 (—Ç–µ–∫—Å—Ç)
async def ask_question9(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "ü•û **–ó–∞–¥–∞–Ω–∏–µ 9**\n"
        "–í –°—É–±–æ—Ç–∏—Ü–µ, –≥–¥–µ –≤–∫—É—Å–Ω–æ –∏ —Ç–µ–ø–ª–æ,\n"
        "–õ–µ–ø–µ—à–∫–∞ –∂–∞—Ä–∏—Ç—Å—è, –ø–∞—Ö–Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ.\n"
        "–í–µ–Ω–≥–µ—Ä—Å–∫–∞—è, —Å —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–æ–π, –æ–Ω–∞,\n"
        "–ù–∞–∑–æ–≤–∏ –µ—ë –∏–º—è ‚Äî –∏ –∑–∞–≥–∞–¥–∫–∞ —Ä–µ—à–µ–Ω–∞."
    ) if language == "ru" else (
        "ü•û **Task 9**\n"
        "In Subotica, where it‚Äôs warm and bright,\n"
        "A flatbread sizzles‚Äîoh, what a delight!\n"
        "Hungarian, crispy, golden to see,\n"
        "Say its name, and the riddle‚Äôs set free!"
    )

    await message.answer(text)
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question9)

@dp.message(QuestState.question9)
async def process_question9(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    correct_answer = "–ª–∞–Ω–≥–æ—à" if language == "ru" else "langos"
    response_correct = "‚úÖ –í–µ—Ä–Ω–æ! –ù–∞–¥–µ—é—Å—å, —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –µ–≥–æ!" if language == "ru" else "‚úÖ Correct! Hope you try it!"
    response_wrong = "‚ùå –ü–æ–¥—É–º–∞–π –µ—â—ë! –≠—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –≤–µ–Ω–≥–µ—Ä—Å–∫–∞—è —É–ª–∏—á–Ω–∞—è –µ–¥–∞." if language == "ru" else "‚ùå Think again! It's a popular Hungarian street food."

    if message.text.strip().lower() == correct_answer:
        await message.answer(response_correct)
        await ask_question10(message, state)
    else:
        await message.answer(response_wrong)

# –í–æ–ø—Ä–æ—Å 10 (—Ñ–æ—Ç–æ)
async def ask_question10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    text = (
        "üì∏ **–ó–∞–¥–∞–Ω–∏–µ 10**\n"
        "–°–Ω–∏–º–∏ —Ç–æ—Ç –º–∏–≥, —á—Ç–æ –≤ —Å–µ—Ä–¥—Ü–µ –æ—Ç–∑–æ–≤—ë—Ç—Å—è,\n"
        "–ì–¥–µ –≥–æ—Ä–æ–¥ –Ω–µ–∂–Ω–æ –¥–∞—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–∏–≤–µ—Ç.\n"
        "–ü—É—Å—Ç—å –≤ –∫–∞–¥—Ä–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è,\n"
        "–¢–∞–∫–æ–π, –∫–∞–∫–æ–π –∑–∞–ø–æ–º–Ω–∏—à—å —Ç—ã –Ω–∞–≤–µ–∫."
    ) if language == "ru" else (
        "üì∏ **Task 10**\n"
        "Capture the moment that touches your heart,\n"
        "Where the city greets you with warmth from the start.\n"
        "Let the atmosphere stay in your frame,\n"
        "Just as you‚Äôll cherish it, always the same."
    )

    await message.answer(text)
    await state.set_state(QuestState.question10)

@dp.message(QuestState.question10, F.photo)
async def process_question10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")

    completion_text = (
        "‚úÖ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ –°—É–±–æ—Ç–∏—Ü—ã!\n\n"
        "‚ú® –ë—É–¥—É —Ä–∞–¥–∞, –µ—Å–ª–∏ —Ç—ã –ø–æ–¥–ø–∏—à–µ—à—å—Å—è –Ω–∞ –º–µ–Ω—è –≤ Instagram: [@hristy_life](https://www.instagram.com/hristy_life)\n"
        "üì∏ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å, –ø–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º —Ñ–æ—Ç–æ –≤ —Å—Ç–æ—Ä–∏—Å –∏ –æ—Ç–º–µ—Ç—å –º–µ–Ω—è ‚Äî —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–¥–µ–ª–∞—é —Ä–µ–ø–æ—Å—Ç!\n\n"
        "üéÅ –ê –µ—Å–ª–∏ –æ—Ç–º–µ—Ç–∏—à—å –º–µ–Ω—è –≤ —Å—Ç–æ—Ä–∏—Å, –∂–¥–∏ –º–∞–ª–µ–Ω—å–∫–∏–π —Å—é—Ä–ø—Ä–∏–∑! üòâ\n\n"
        "üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ! –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"
    ) if language == "ru" else (
        "‚úÖ A wonderful photo of Subotica!\n\n"
        "‚ú® I'd be happy if you follow me on Instagram: [@hristy_life](https://www.instagram.com/hristy_life)\n"
        "üì∏ If you want, share this photo in your story and tag me ‚Äî I'll gladly repost it!\n\n"
        "üéÅ And if you tag me in your story, expect a little surprise! üòâ\n\n"
        "üíñ Thank you for participating in the quest! Hope you enjoyed it. See you next time!"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
    await bot.send_message(ADMIN_CHAT_ID, f"üì∑ @{message.from_user.username} –∑–∞–≤–µ—Ä—à–∏–ª –∫–≤–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 10")

    await message.answer(completion_text, parse_mode="Markdown")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∫–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω

@dp.message(QuestState.question10)
async def handle_text_in_question10(message: types.Message, state: FSMContext):
    data = await state.get_data()
    language = data.get("language", "ru")
    await message.answer(
        "‚ùå –≠—Ç–æ —Ñ–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–∏–º–æ–∫." if language == "ru" else
        "‚ùå This is a photo task! Please send a picture."
    )

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())