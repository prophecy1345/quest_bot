import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from database import is_user_paid, add_user, remove_user

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
ADMIN_CHAT_ID = os.getenv("CHAT_ID")
WELCOME_IMAGE_PATH = "welcome.jpg"


if TOKEN is None:
    raise ValueError("–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞!")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∫–≤–µ—Å—Ç–∞
class QuestState(StatesGroup):
    question1 = State()
    question2 = State()
    question3 = State()
    question4 = State()
    question5 = State()
    question6 = State()
    question7 = State()
    question8 = State()
    question9 = State()
    question10 = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    if not is_user_paid(user_id):
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç!\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, —Å–¥–µ–ª–∞–π —Å–ª–µ–¥—É—é—â–µ–µ:\n\n"
            "1Ô∏è‚É£ –ù–∞–ø–∏—à–∏ –º–Ω–µ (@Hristina_Photo) ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø.\n"
            "2Ô∏è‚É£ –û–ø–ª–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n"
            "3Ô∏è‚É£ –£–∑–Ω–∞–π —Å–≤–æ–π Telegram ID ‚Äî –Ω–∞–ø–∏—à–∏ /id –≤ @QuestForSubotica_bot.\n"
            "4Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π ID (@Hristina_Photo).\n"
            "5Ô∏è‚É£ –Ø –¥–æ–±–∞–≤–ª—é —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ ‚Äî –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "6Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏ /start –≤ @QuestForSubotica_bot.\n\n"

            "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–∏—à–∏ –º–Ω–µ!"
        )
        return

    photo = FSInputFile(WELCOME_IMAGE_PATH)
    await message.answer_photo(photo, caption=
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Subotica Quest!\n\n"
        "–≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —Å–¥–µ–ª–∞–µ—Ç —Ç–≤–æ—é –ø—Ä–æ–≥—É–ª–∫—É –ø–æ –°—É–±–æ—Ç–∏—Ü–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–µ–µ."
        "–ü—Ä–æ—è–≤–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º!\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –¢–æ–≥–¥–∞ –≤–ø–µ—Ä–µ–¥! üöÄ"
    )
    await ask_question1(message, state)


@dp.message(Command("id"))
async def send_user_id(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ Telegram ID"""
    user_id = message.from_user.id
    await message.answer(f"üìå –í–∞—à Telegram ID: `{user_id}`", parse_mode="Markdown")


@dp.message(Command("add"))
async def add_user_command(message: types.Message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ /add")
        return

    try:
        user_id = int(args[1])
        add_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")

@dp.message(Command("remove"))
async def remove_user_command(message: types.Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ /remove")
        return

    try:
        user_id = int(args[1])
        remove_user(user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö.")
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
def get_quiz_keyboard(options):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=opt)] for opt in options
    ])


# –í–æ–ø—Ä–æ—Å 1 (–ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏)
async def ask_question1(message: types.Message, state: FSMContext):
    await message.answer(
        "ü¶á –ó–∞–¥–∞–Ω–∏–µ 1\n"
        "–£ –≤–æ–∫–∑–∞–ª–∞, –≥–¥–µ —É–ª–∏—Ü–∞ –¥—ã—à–∏—Ç —Ç–∏—à–∏–Ω–æ–π,\n"
        "–ö—Ä—ã–ª–∞—Ç–∞—è —Å—Ç—Ä–∞–∂–∞ –Ω–∞—à–ª–∞ —É–≥–æ–ª —Å–≤–æ–π.\n"
        "–ù–∞–π–¥–∏ –µ—ë –æ–±–ª–∏–∫ –Ω–∞ –∫–∞–º–µ–Ω–Ω–æ–π –≥–ª–∞–¥–∏ ‚Äî\n"
        "–ê —Å–∫–æ–ª—å–∫–æ —Å—Ç—É–ø–µ–Ω–µ–∫ –≤–µ–¥—É—Ç –∫ –µ—ë ‚Äû–∑–≥—Ä–∞–¥–µ‚Äú?"
    )
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question1)

@dp.message(QuestState.question1)
async def process_question1(message: types.Message, state: FSMContext):
    if message.photo:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç.")
        return

    data = await state.get_data()
    attempts = data.get("attempts", 0)

    if message.text.strip() == "7":
        await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!")
        await ask_question2(message, state)
    else:
        attempts += 1
        await state.update_data(attempts=attempts)
        if attempts < 3:
            await message.answer(f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º. –ü–æ—Å—á–∏—Ç–∞–π –µ—â—ë —Ä–∞–∑! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}")
        else:
            await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 7. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!")
            await ask_question2(message, state)

# –í–æ–ø—Ä–æ—Å 2 (—Ñ–æ—Ç–æ)
async def ask_question2(message: types.Message, state: FSMContext):
    await message.answer("ü©∑  –ó–∞–¥–∞–Ω–∏–µ 2\n"
        "–í —Ñ–∞—Å–∞–¥–∞—Ö –∏ –ø–ª–∏—Ç–∫–µ, –≤ –∫–æ–≤–∞–Ω—ã—Ö —É–∑–æ—Ä–∞—Ö\n"
        "–°–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å–µ—Ä–¥—Ü–∞ –≤ –≥–æ—Ä–æ–¥—Å–∫–∏—Ö –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö.\n"
        "–ù–∞–π–¥–∏ –∏—Ö –Ω–∞ –∑–¥–∞–Ω–∏—è—Ö ‚Äî —Ç—Ä–∏ –æ—Ç—ã—â–∏,\n"
        "–í—ã–±–µ—Ä–∏ —Å–Ω–∏–º–∫–∏ –∏ –º–Ω–µ –æ—Ç–æ—à–ª–∏!")
    await state.set_state(QuestState.question2)
    await state.update_data(photo_count=0)

@dp.message(QuestState.question2, F.photo)
async def process_question2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_count = data.get("photo_count", 0) + 1

    if photo_count > 3:
        await message.answer("‚ö†Ô∏è –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 3 —Ñ–æ—Ç–æ! –ù–æ –º–Ω–µ –ø—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ç—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è.")
        return

    await state.update_data(photo_count=photo_count)
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)

    if photo_count < 3:
        await message.answer(f"üì∏ –§–æ—Ç–æ {photo_count}/3 –ø—Ä–∏–Ω—è—Ç–æ! –ñ–¥—É –µ—â—ë {3 - photo_count}.")
    else:
        await bot.send_message(ADMIN_CHAT_ID, f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª 3 —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 2")
        await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –≤—ã—à–ª–∞! ü©∑ –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
        await ask_question3(message, state)
        await state.update_data(photo_count=0)

@dp.message(QuestState.question2)
async def handle_text_in_question2(message: types.Message):
    await message.answer("‚ùå –¢—ã —É–¥–∏–≤–∏—à—å—Å—è, –∫–∞–∫ —á–∞—Å—Ç–æ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–µ—Ä–¥–µ—á–∫–∏! –ü—Ä–∏—à–ª–∏ —Ç—Ä–∏ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")

# –í–æ–ø—Ä–æ—Å 3 (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç)
async def ask_question3(message: types.Message, state: FSMContext):
    await message.answer(
        "üìñ –ó–∞–¥–∞–Ω–∏–µ 3\n"
        "–í –∫–Ω–∏–∂–Ω—ã–π –∑–∞–π–¥–∏, –æ—Ç—ã—â–∏ –±–µ–∑ —Ç—Ä—É–¥–∞\n"
        "–ö–Ω–∏–≥—É, —á—Ç–æ –≤ —Å–µ—Ä–¥—Ü–µ —Ç–≤–æ—ë–º –Ω–∞–≤—Å–µ–≥–¥–∞.\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–µ –≤—Å–ª—É—Ö –ø—Ä–æ—á–∏—Ç–∞–π ‚Äî\n"
        "–ö–∞–∫ –Ω–∞ —Å–µ—Ä–±—Å–∫–æ–º –∑–≤—É—á–∏—Ç, –æ—Ç–≤–µ—á–∞–π!"
    )
    await state.set_state(QuestState.question3)

@dp.message(QuestState.question3)
async def process_question3(message: types.Message, state: FSMContext):
    await message.answer("üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä –ª—é–±–∏–º–æ–π –∫–Ω–∏–≥–∏! –ò–¥–µ–º –¥–∞–ª—å—à–µ?")
    await ask_question4(message, state)

# –í–æ–ø—Ä–æ—Å 4 (—Ñ–æ—Ç–æ –¥–≤–µ—Ä–∏)
async def ask_question4(message: types.Message, state: FSMContext):
    await message.answer(
        "üö™ –ó–∞–¥–∞–Ω–∏–µ 4\n"
        "–ù–∞–π–¥–∏ –ª—é–±—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –¥–≤–µ—Ä—å,\n"
        "–í–Ω—É—Ç—Ä—å –∑–∞–≥–ª—è–Ω–∏, —Ç–∏—à–∏–Ω–µ –ª–∏—à—å –ø–æ–≤–µ—Ä—å.\n"
        "–õ–µ—Å—Ç–Ω–∏—Ü—ã —Å—Ç—Ä–æ–π–Ω–æ–π –∏–∑–≥–∏–±—ã —É–∑—Ä–∏\n"
        "–ò —Ñ–æ—Ç–æ –¥–≤–µ—Ä–∏ –º–Ω–µ —Å–∫–æ—Ä–µ–µ –ø—Ä–∏—à–ª–∏!"
    )
    await state.update_data(photo_count=0)
    await state.set_state(QuestState.question4)

@dp.message(QuestState.question4, F.photo)
async def process_question4(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_count = data.get("photo_count", 0) + 1

    if photo_count > 1:
        await message.answer("‚ö†Ô∏è –û–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –º–Ω–µ —Ö–≤–∞—Ç–∏—Ç, —Å–ø–∞—Å–∏–±–æ!")
        return

    await state.update_data(photo_count=photo_count)
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)

    await bot.send_message(ADMIN_CHAT_ID, f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 4")
    await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Ñ–æ—Ç–æ –≤—ã—à–ª–æ! –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ!")
    await ask_question5(message, state)
    await state.update_data(photo_count=1)

@dp.message(QuestState.question4)
async def handle_text_in_question4(message: types.Message):
    await message.answer("‚ùå –ú–Ω–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å —É–≤–∏–¥–µ—Ç—å —Ç–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–≤–µ—Ä–∏! –ö–∞–∫—É—é —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏?")

# –í–æ–ø—Ä–æ—Å 5 (–ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏)
async def ask_question5(message: types.Message, state: FSMContext):
    await message.answer(
        "üèõ **–ó–∞–¥–∞–Ω–∏–µ 5**\n"
        "–í —Ü–µ–Ω—Ç—Ä–µ –°—É–±–æ—Ç–∏—Ü—ã, –≥–¥–µ –∂–∏–∑–Ω–∏ –±—ã—Å—Ç—Ä—ã–π —Ö–æ–¥,\n"
        "–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Ç–∏—Ö–æ –∂–∏–≤—ë—Ç.\n"
        "–í–≥–ª—è–¥–∏—Å—å, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏, –≤—Å–µ –¥–µ—Ç–∞–ª–∏ —É–∑–Ω–∞–π,\n"
        "–ò–∑ —á–µ–≥–æ –æ–Ω —Å–æ–∑–¥–∞–Ω ‚Äî —Å–∫–æ—Ä–µ–π –æ—Ç–≥–∞–¥–∞–π!"
    )
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question5)

@dp.message(QuestState.question5)
async def process_question5(message: types.Message, state: FSMContext):
    if message.photo:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç.")
        return

    data = await state.get_data()
    attempts = data.get("attempts", 0)

    if message.text.strip().lower() == "–±—Ä–æ–Ω–∑–∞":
        await message.answer("‚úÖ –£—Ä–∞! –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!")
        await ask_question6(message, state)
    else:
        attempts += 1
        await state.update_data(attempts=attempts)
        if attempts < 3:
            await message.answer(f"‚ùå –ù–µ —Å–æ–≤—Å–µ–º. –ü–æ–¥—É–º–∞–π –µ—â—ë! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ë—Ä–æ–Ω–∑–∞. –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Ç!")
            await ask_question6(message, state)

        # –í–æ–ø—Ä–æ—Å 6 (–ø—Ä–∏–µ–º —Ñ–æ—Ç–æ, —Å—Ç—Ä–æ–≥–æ 1 —Ñ–æ—Ç–æ)
async def ask_question6(message: types.Message, state: FSMContext):
    await message.answer(
        "‚õ≤Ô∏è –ó–∞–¥–∞–Ω–∏–µ 6\n"
        "–î–≤–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞ –∏ 'magnum opus' —Ä—è–¥–æ–º ‚Äî\n"
        "–ü–æ–ª–Ω—ã –ª—é–±–æ–≤—å—é, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ–º –∏—Ö –≤–∑–≥–ª—è–¥—ã.\n"
        "–ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—à—å –∏—Ö - –≤—Ä–µ–º—è –Ω–µ —Ç–µ—Ä—è–π\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–∞–º–µ—Ä—É –∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π!"
    )
    await state.update_data(photo_count=0)
    await state.set_state(QuestState.question6)

@dp.message(QuestState.question6, F.photo)
async def process_question6(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photo_count = data.get("photo_count", 0) + 1

    if photo_count > 1:
        await message.answer("‚ö†Ô∏è –û–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.")
        return

    await state.update_data(photo_count=photo_count)
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)

    await bot.send_message(ADMIN_CHAT_ID, f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 6")
    await message.answer("‚úÖ –ú–æ–ª–æ–¥–µ—Ü! –í —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ —Ç–µ–±—è –∂–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–∞—è –º–∏—Å—Å–∏—è!")
    await ask_question7(message, state)
    await state.update_data(photo_count=1)

@dp.message(QuestState.question6)
async def handle_text_in_question6(message: types.Message):
    await message.answer("‚ùå –Ø –±—ã —Ö–æ—Ç–µ–ª–∞ —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –æ–¥–∏–Ω —Å–Ω–∏–º–æ–∫.")

# –í–æ–ø—Ä–æ—Å 7 (–ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏)
async def ask_question7(message: types.Message, state: FSMContext):
    await message.answer(
        "üßò‚Äç‚ôÇÔ∏è –ó–∞–¥–∞–Ω–∏–µ 7\n"
        "–ú–µ—Ç–∞–Ω–∏–µ –¥—É—Ö–∞ –æ—Å—Ç–∞–≤—å –ø–æ–∑–∞–¥–∏\n"
        "–ï–¥–∏–Ω—Å—Ç–≤–æ —Å—É–µ—Ç—ã –∏ —Ç–∏—à–∏–Ω—ã –≤ –≥—Ä—É–¥–∏\n"
        "–†–∞—Å—Å–ª–∞–±—å—Å—è, –≥–¥–µ –∫–æ—Ñ–µ, —É—é—Ç –∏ –ø–æ–∫–æ–π\n"
        "–ê —Ä–∞–¥–æ—Å—Ç—å –±—ã–ª–∞ –≤–µ–¥—å –≤—Å–µ–≥–¥–∞ –ø–æ–¥ —Ä—É–∫–æ–π\n"
        "–ö–æ–≥–¥–∞ –≤—Å–µ –ø–æ–π–º–µ—à—å - –æ—Ç–≤–µ—Ç —Ç—ã –Ω–∞–π–¥–µ—à—å!"
    )
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question7)

@dp.message(QuestState.question7)
async def process_question7(message: types.Message, state: FSMContext):
    if message.photo:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ! –û—â—É—Ç–∏ –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–∏—à–ª–∏ –æ—Ç–≤–µ—Ç.")
        return

    data = await state.get_data()
    attempts = data.get("attempts", 0)

    if message.text.strip().lower() == "–º–µ—Ä–∞–∫":
        await message.answer("‚úÖ –ò–º–µ–Ω–Ω–æ —Ç–∞–∫! –ù–∞–¥–µ—é—Å—å —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –º–æ–º–µ–Ω—Ç–æ–º –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å!")
        await ask_question8(message, state)
    else:
        attempts += 1
        await state.update_data(attempts=attempts)
        if attempts < 3:
            await message.answer(f"‚ùå –¢—ã —Ç–æ—á–Ω–æ –ø—å–µ—à—å –Ω–∞–ø–∏—Ç–æ–∫ –∏ –æ—â—É—â–∞–µ—à—å —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}")
        else:
            await message.answer("‚ùå –ú–Ω–µ –∂–∞–ª—å! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ú–µ—Ä–∞–∫. –û—Ç–≥–∞–¥–∫–∞ –∫—Ä—ã–ª–∞—Å—å –≤ –ø–µ—Ä–≤—ã—Ö –±—É–∫–≤–∞—Ö. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –¥–∞–ª—å—à–µ –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ!")
            await ask_question8(message, state)

# –í–æ–ø—Ä–æ—Å 8 (–ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏)
async def ask_question8(message: types.Message, state: FSMContext):
    await message.answer(
        "üìç –ó–∞–¥–∞–Ω–∏–µ 8\n"
        "–¢–∞–º, –≥–¥–µ –∫–∞–º–µ–Ω—å –ª–µ–∂–∏—Ç –≤–µ–∫–æ–≤–æ–π –ø–æ–¥ –Ω–æ–≥–æ–π,\n"
        "–ù–∞—á–∏–Ω–∞–µ—Ç —É–ª–∏—Ü—É –º–∞–≥–∞–∑–∏–Ω –æ–±—É–≤–Ω–æ–π.\n"
        "–ú–æ—â—ë–Ω–∞—è, –¥—Ä–µ–≤–Ω—è—è, –º–∞–Ω–∏—Ç –ø—Ä–æ–π—Ç–∏—Å—å\n"
        "–ù–∞–∑–≤–∞–Ω—å–µ –ø–∏—à–∏ –∏ –Ω–∞ –Ω–µ–π –æ–∫–∞–∂–∏—Å—å."
    )
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question8)

@dp.message(QuestState.question8)
async def process_question8(message: types.Message, state: FSMContext):
    if message.photo:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ! –£–≥–∞–¥–∞–π –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã.")
        return

    data = await state.get_data()
    attempts = data.get("attempts", 0)

    if message.text.strip().lower() == "–ø–µ—Ç—Ä–∞ –¥—Ä–∞–ø—à–∏–Ω–∞":
        await message.answer("‚úÖ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! –ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —É–ª–æ—á–∫–∞?")
        await ask_question9(message, state)
    else:
        attempts += 1
        await state.update_data(attempts=attempts)
        if attempts < 3:
            await message.answer(f"‚ùå –ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.  –ù–∞–π–¥–∏ –º–æ—â—ë–Ω—É—é —É–ª–∏—Ü—É —Ä—è–¥–æ–º —Å –∫—Ä—É–≥–æ–≤—ã–º –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∫–æ–º! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}")
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –ü–µ—Ç—Ä–∞ –î—Ä–∞–ø—à–∏–Ω–∞. –°–æ–≤–µ—Ç—É—é –Ω–∞–π—Ç–∏ —ç—Ç—É —É–ª–æ—á–∫—É –∏ –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è –ø–æ –Ω–µ–π!")
            await ask_question9(message, state)

# –í–æ–ø—Ä–æ—Å 9 (–ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ–ø—ã—Ç–∫–∏)
async def ask_question9(message: types.Message, state: FSMContext):
    await message.answer(
        "ü•û –ó–∞–¥–∞–Ω–∏–µ 9\n"
        "–í –°—É–±–æ—Ç–∏—Ü–µ, –≥–¥–µ –≤–∫—É—Å–Ω–æ –∏ —Ç–µ–ø–ª–æ,\n"
        "–õ–µ–ø–µ—à–∫–∞ –∂–∞—Ä–∏—Ç—Å—è, –ø–∞—Ö–Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–ª—à–µ–±—Å—Ç–≤–æ.\n"
        "–í–µ–Ω–≥–µ—Ä—Å–∫–∞—è, —Å —Ö—Ä—É—Å—Ç—è—â–µ–π –∫–æ—Ä–æ—á–∫–æ–π, –æ–Ω–∞,\n"
        "–ù–∞–∑–æ–≤–∏ –µ—ë –∏–º—è ‚Äî –∏ –∑–∞–≥–∞–¥–∫–∞ —Ä–µ—à–µ–Ω–∞."
    )
    await state.update_data(attempts=0)
    await state.set_state(QuestState.question9)

@dp.message(QuestState.question9)
async def process_question9(message: types.Message, state: FSMContext):
    if message.photo:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–ø—ë—à–∫–∏.")
        return

    data = await state.get_data()
    attempts = data.get("attempts", 0)

    if message.text.strip().lower() == "–ª–∞–Ω–≥–æ—à":
        await message.answer("‚úÖ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! –î—É–º–∞—é, —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –∑–¥–µ—Å—å!")
        await ask_question10(message, state)
    else:
        attempts += 1
        await state.update_data(attempts=attempts)
        if attempts < 3:
            await message.answer(f"‚ùå –ü–æ–∫–∞ –Ω–µ —É–≥–∞–¥–∞–ª. –ü—Ä–æ –Ω–µ–µ —è –ø–∏—Å–∞–ª–∞ –≤ –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ. –ú–æ–∂–µ—à—å –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É —Ç–∞–º. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}")
        else:
            await message.answer("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: –õ–∞–Ω–≥–æ—à. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π. –í–ø–µ—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ–Ω–æ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö –Ω–µ –±—É–¥–µ—Ç!")
            await ask_question10(message, state)

# –í–æ–ø—Ä–æ—Å 10 (—Ñ–æ—Ç–æ + Instagram)
async def ask_question10(message: types.Message, state: FSMContext):
    await message.answer(
        "üì∏ –ó–∞–¥–∞–Ω–∏–µ 10\n"
        "–°–Ω–∏–º–∏ —Ç–æ—Ç –º–∏–≥, —á—Ç–æ –≤ —Å–µ—Ä–¥—Ü–µ –æ—Ç–∑–æ–≤—ë—Ç—Å—è,\n"
        "–ì–¥–µ –≥–æ—Ä–æ–¥ –Ω–µ–∂–Ω–æ –¥–∞—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–∏–≤–µ—Ç.\n"
        "–ü—É—Å—Ç—å –≤ –∫–∞–¥—Ä–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è,\n"
        "–¢–∞–∫–æ–π, –∫–∞–∫–æ–π –∑–∞–ø–æ–º–Ω–∏—à—å —Ç—ã –Ω–∞–≤–µ–∫."
    )
    await state.update_data(photo_received=False)
    await state.set_state(QuestState.question10)

@dp.message(QuestState.question10, F.photo)
async def process_question10(message: types.Message, state: FSMContext):
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ
    await bot.send_message(ADMIN_CHAT_ID, f"üì∑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 10")
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)

    await message.answer(
        "‚úÖ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π —Å–Ω–∏–º–æ–∫ –°—É–±–æ—Ç–∏—Ü—ã!\n"
        "\n"
        "‚ú® –ë—É–¥—É —Ä–∞–¥–∞, –µ—Å–ª–∏ —Ç—ã –ø–æ–¥–ø–∏—à–µ—à—å—Å—è –Ω–∞ –º–µ–Ω—è –≤ Instagram: https://www.instagram.com/hristy_life\n"
        "üì∏ –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å, –ø–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º —Ñ–æ—Ç–æ –≤ —Å—Ç–æ—Ä–∏—Å –∏ –æ—Ç–º–µ—Ç—å –º–µ–Ω—è ‚Äî —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º —Å–¥–µ–ª–∞—é —Ä–µ–ø–æ—Å—Ç,\n"
        "\n"
        "–∏ —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –º–∞–ª–µ–Ω—å–∫–∏–π —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –¥–æ—à—ë–ª –¥–æ –∫–æ–Ω—Ü–∞. üéÅ\n"
        "\n"
        "üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–µ—Å—Ç–µ! –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"
    )
    await state.clear()

@dp.message(QuestState.question10)
async def handle_text_in_question10(message: types.Message):
    await message.answer("‚ùå –°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –ø–µ—Ä–µ–¥–∞—ë—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –°—É–±–æ—Ç–∏—Ü—ã.")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())